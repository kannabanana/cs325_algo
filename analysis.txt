#NAME: SR Kanna, Isaac Stallcup
#COURSE: Algorithms CS325
#DATE: Fall 2016, 10/11/2016
#INSTRUCTOR: Amir Nayyeri

ANALYSIS OF ALGORITHMS PRESENTED

**********************************************************
First algorithm: name n2

Description
##########################################################

This algorithm takes, as inputs, the sets P and Q along
with N, the number of points in P and Q, and a counter
to keep track of the number of intersections.

The altorithm works by iterating through the elements of Q
starting from Q0 and working to QN for the current value
of N. For each Qi, it compares the values of Qi and QN.

Two points Pi, Pj with Pi < Pj have lines that intersect 
if their respective Q-values, Qi and Qj, satisfy the 
inequality Qi > Qj. 

In each comparison that the aglorithm performs between 
Qi and QN, it checks to see if the above "reversal" is
satisfied, namely that if Qi > QN, Pi < PN. If this is
true, the algorithm increments the counter variable 
keeping track of the # of intersections.

The algorithm is recursive, in that it calls itself with
N smaller by one after all comparisons for Qi -> QN have
been performed (again, i ranges from 0 to the current
value of N). The algorithm can shrink N becuase it is
uneccessary to compare Pi values to PN when i>n as we
can say that Pi > PN if i > N (P is sorted).

Runtime
##########################################################

This algorithm is O(N^2) time; all lines other than the
for loop on line 67 and the recursive call on line 77
have runtime O(1). The for loop has runtime of O(N), and
the recursive call performs this O(N) loop on each of the
N elements of Q, so the algorithm is O(N^2).

Proof of Correctness
##########################################################

The proof is inductive. The base case is where P and Q
contain one element; there are no interections to find and
so we have found all possible intersections.

The inductive hypothesis is that, for any lists P and Q
of size <= N, the number of intersections has been correctly
counted for lines between each (Pi, Qi) for 0 <= i < N.

For lists P' and Q', each with size N, prove that the algorthm
will correctly find all intersections. For the pairs (Pi, Qi)
for 0 <= i < N, the inductive hypothesis states that all
intersections will be correctly found. Then we must find all
intersections between (PN, QN) and each (Pi, Qi) for 
0 <= i < N. The algorithm checks each (Pi, Qi) against
(PN, QN) to see if an intersection exists.

It does this by checking if Qi > QN for Pi < PN; if this
inequality is true, there is an intersection. This checking
process finds all intersections between the line connecting
PN and QN with the lines connecting all Pi, Qi with
0 <= i < N.

Since the rest of the intersections are given by the inductive
hypothesis, any lists P, Q will have all intersections
found by the algorithm.

**********************************************************
Second algorithm: name mergeSort

Description
##########################################################

The algorithm is based on a traditional implementation of
mergeSort, and its essential operations are the same. It 
recursively divides lists in half, and operates on the
resulting two lists of half size. When the size of a list
is <= 1, the recursion stops.

It then proceeds through the recursive lists, comparing 
progressive items of each sublist and inserting the smaller.
However, the algorithm also uses this information to find
intersections with the aforementioned method (where an
intersection exists if Pi < PN and Qi > QN).  

Essentially, the algorithm is merge sort, but on each comparison
to merge, the compared points are checked for an intersection.

Runtime
##########################################################

As with merge sort, this algorithm is O(nlogn) in its runtime
as the extra comparison is done in O(1) time and thus does not
affect the runtime of the algorithm.

Proof of Correctness
##########################################################

Proof is by induction. The base case is with a list of one 
element each; there are no intersections to find, and indeed
mergesort does not run. Alternatively, if both P and Q have
two elements (smallest non-trivial case), mergeSort runs 
correctly on the two, they are compared and if they
intersect the intersection is found.

Inductive hypothesis: suppose that the algorithm correctly
identifies the number of intersections with two lists P'
and Q' where both P' and Q' contain a number of elements
less than some N >= 2 [again if N = 1, the case is trivial].

If it can be shown that for P and Q containing N elements,
the algorithm is proven correct. If P and Q contain N 
elements, when Q is sorted by mergeSort, it is reduced
into two sub-arrays which contain N/2 elements each;
these are each correctly counted for intersections
by the inductive hypothesis.

As they are rejoined by mergeSort, each of these N elements
is compared to another by the algorithm. This series of
comparisons counts the intersections introduced
by the combination of the two sub-arrays, and thus the
algorithm correcty counts the number of intersections. 
